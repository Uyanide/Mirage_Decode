const c=[],o=new Map;let t=!1,n=!1;self.onmessage=a=>{const e=a.data;switch(e.type){case"init":t&&postMessage({success:!0,payload:{formats:Array.from(o.keys())}});try{i.isAvailable()&&o.set("JPEG",new i)}catch(s){console.error("Failed to initialize JPEG encoder:",s)}try{f.isAvailable()&&o.set("PNG",new f)}catch(s){console.error("Failed to initialize PNG encoder:",s)}t=!0,postMessage({success:!0,payload:{formats:Array.from(o.keys())}});break;case"encode":t||postMessage({success:!1,id:e.id,error:"Worker is not initialized"}),c.push(e),n||(n=!0,u().catch(s=>{console.error("Error processing image queue:",s),postMessage({success:!1,id:e.id,error:s instanceof Error?s.message:"Unknown error"})}).finally(()=>{n=!1}));break}};async function u(){for(;c.length>0;){const{id:a,payload:e}=c.shift(),s=o.get(e.format);if(!s){postMessage({success:!1,id:a,error:`Encoder for format ${e.format} not found`});continue}try{const r=await s.encode(e.imageData);postMessage({success:!0,id:a,payload:{fileData:r.buffer}},{transfer:[r.buffer]})}catch(r){console.error(`Error encoding image with format ${e.format}:`,r),postMessage({success:!1,id:a,error:r instanceof Error?r.message:"Unknown error"})}}}class l{}class i extends l{static isAvailable(){return!0}async encode(e){return(await import("./pttjpeg-wrap-DHh1pdaR.js")).encode(e)}}class f extends l{static isAvailable(){return typeof OffscreenCanvas<"u"}async encode(e){const s=new OffscreenCanvas(e.width,e.height),r=s.getContext("2d");if(!r)throw new Error("Failed to get canvas context");r.putImageData(e,0,0);const d=await(await s.convertToBlob({type:"image/png"})).arrayBuffer();return new Uint8Array(d)}}
